import "./chunk-2GTGKKMZ.js";

// node_modules/crisp-sdk-web/dist/crisp.esm.js
var CrispMessage = (
  /** @class */
  function() {
    function CrispMessage2(crisp) {
      this.parent = crisp;
    }
    CrispMessage2.prototype.send = function(type, content) {
      this.parent.createSingletonIfNecessary();
      window.$crisp.push(["do", "message:send", [type, content]]);
    };
    CrispMessage2.prototype.sendText = function(content) {
      this.send("text", content);
    };
    CrispMessage2.prototype.sendFile = function(content) {
      this.send("file", content);
    };
    CrispMessage2.prototype.sendAnimation = function(content) {
      this.send("animation", content);
    };
    CrispMessage2.prototype.sendAudio = function(content) {
      this.send("audio", content);
    };
    CrispMessage2.prototype.show = function(type, content) {
      this.parent.createSingletonIfNecessary();
      window.$crisp.push(["do", "message:show", [type, content]]);
    };
    CrispMessage2.prototype.showText = function(content) {
      this.show("text", content);
    };
    CrispMessage2.prototype.showFile = function(content) {
      this.show("file", content);
    };
    CrispMessage2.prototype.showAnimation = function(content) {
      this.show("animation", content);
    };
    CrispMessage2.prototype.showAudio = function(content) {
      this.show("audio", content);
    };
    CrispMessage2.prototype.showPicker = function(content) {
      this.show("picker", content);
    };
    CrispMessage2.prototype.showField = function(content) {
      this.show("field", content);
    };
    CrispMessage2.prototype.showCarousel = function(content) {
      this.show("carousel", content);
    };
    CrispMessage2.prototype.markAsRead = function() {
      this.parent.createSingletonIfNecessary();
      window.$crisp.push(["do", "message:read"]);
    };
    CrispMessage2.prototype.onMessageSent = function(callback) {
      this.parent.createSingletonIfNecessary();
      window.$crisp.push(["off", "message:sent"]);
      window.$crisp.push(["on", "message:sent", callback]);
    };
    CrispMessage2.prototype.onMessageReceived = function(callback) {
      this.parent.createSingletonIfNecessary();
      window.$crisp.push(["off", "message:received"]);
      window.$crisp.push(["on", "message:received", callback]);
    };
    CrispMessage2.prototype.onMessageComposeSent = function(callback) {
      this.parent.createSingletonIfNecessary();
      window.$crisp.push(["off", "message:compose:sent"]);
      window.$crisp.push(["on", "message:compose:sent", callback]);
    };
    CrispMessage2.prototype.onMessageComposeReceive = function(callback) {
      this.parent.createSingletonIfNecessary();
      window.$crisp.push(["off", "message:compose:received"]);
      window.$crisp.push(["on", "message:compose:received", callback]);
    };
    return CrispMessage2;
  }()
);
var CrispUser = (
  /** @class */
  function() {
    function CrispUser2(crisp) {
      this.parent = crisp;
    }
    CrispUser2.prototype.setNickname = function(nickname) {
      this.parent.createSingletonIfNecessary();
      window.$crisp.push(["set", "user:nickname", [nickname]]);
    };
    CrispUser2.prototype.setEmail = function(email, hmac) {
      this.parent.createSingletonIfNecessary();
      window.$crisp.push(["set", "user:email", [email, hmac]]);
    };
    CrispUser2.prototype.setPhone = function(phone) {
      this.parent.createSingletonIfNecessary();
      window.$crisp.push(["set", "user:phone", [phone]]);
    };
    CrispUser2.prototype.setAvatar = function(avatar) {
      this.parent.createSingletonIfNecessary();
      window.$crisp.push(["set", "user:avatar", [avatar]]);
    };
    CrispUser2.prototype.setCompany = function(name, data) {
      var _payload = {};
      if (data && data.url) {
        _payload.url = data.url;
      }
      if (data && data.description) {
        _payload.description = data.description;
      }
      if (data && data.employment) {
        _payload.employment = [
          data.employment.title
        ];
        if (data.employment.role) {
          _payload.employment.push(data.employment.role);
        }
      }
      this.parent.createSingletonIfNecessary();
      window.$crisp.push(["set", "user:company", [name, _payload]]);
    };
    CrispUser2.prototype.getEmail = function() {
      if (!this.parent.isCrispInjected()) {
        return null;
      }
      return window.$crisp.get("user:email");
    };
    CrispUser2.prototype.getPhone = function() {
      if (!this.parent.isCrispInjected()) {
        return null;
      }
      return window.$crisp.get("user:phone");
    };
    CrispUser2.prototype.getNickname = function() {
      if (!this.parent.isCrispInjected()) {
        return null;
      }
      return window.$crisp.get("user:nickname");
    };
    CrispUser2.prototype.getAvatar = function() {
      if (!this.parent.isCrispInjected()) {
        return null;
      }
      return window.$crisp.get("user:avatar");
    };
    CrispUser2.prototype.getCompany = function() {
      if (!this.parent.isCrispInjected()) {
        return null;
      }
      return window.$crisp.get("user:company");
    };
    CrispUser2.prototype.onEmailChanged = function(callback) {
      if (this.parent.isCrispInjected()) {
        window.$crisp.push(["off", "user:email:changed"]);
        window.$crisp.push(["on", "user:email:changed", callback]);
      }
    };
    CrispUser2.prototype.onPhoneChanged = function(callback) {
      if (this.parent.isCrispInjected()) {
        window.$crisp.push(["off", "user:phone:changed"]);
        window.$crisp.push(["on", "user:phone:changed", callback]);
      }
    };
    CrispUser2.prototype.onNicknameChanged = function(callback) {
      if (this.parent.isCrispInjected()) {
        window.$crisp.push(["off", "user:nickname:changed"]);
        window.$crisp.push(["on", "user:nickname:changed", callback]);
      }
    };
    CrispUser2.prototype.onAvatarChanged = function(callback) {
      if (this.parent.isCrispInjected()) {
        window.$crisp.push(["off", "user:avatar:changed"]);
        window.$crisp.push(["on", "user:avatar:changed", callback]);
      }
    };
    return CrispUser2;
  }()
);
var CrispTrigger = (
  /** @class */
  function() {
    function CrispTrigger2(crisp) {
      this.parent = crisp;
    }
    CrispTrigger2.prototype.run = function(name) {
      this.parent.createSingletonIfNecessary();
      window.$crisp.push(["do", "trigger:run", [name]]);
    };
    return CrispTrigger2;
  }()
);
var EventsColors;
(function(EventsColors2) {
  EventsColors2["Red"] = "red";
  EventsColors2["Orange"] = "orange";
  EventsColors2["Yellow"] = "yellow";
  EventsColors2["Green"] = "green";
  EventsColors2["Blue"] = "blue";
  EventsColors2["Purple"] = "purple";
  EventsColors2["Pink"] = "pink";
  EventsColors2["Brown"] = "brown";
  EventsColors2["Grey"] = "grey";
  EventsColors2["Black"] = "black";
})(EventsColors || (EventsColors = {}));
var CrispSession = (
  /** @class */
  function() {
    function CrispSession2(crisp) {
      this.parent = crisp;
    }
    CrispSession2.prototype.reset = function(reload) {
      if (reload === void 0) {
        reload = false;
      }
      if (this.parent.isCrispInjected()) {
        window.$crisp.do("session:reset", [reload]);
      }
    };
    CrispSession2.prototype.setSegments = function(segments, overwrite) {
      this.parent.createSingletonIfNecessary();
      $crisp.push(["set", "session:segments", [segments, overwrite]]);
    };
    CrispSession2.prototype.setData = function(data) {
      var _this = this;
      var _payload = [];
      Object.entries(data).forEach(function(item) {
        if (_this.isValidDataValue(item[0])) {
          _payload.push([item[0], item[1]]);
        }
      });
      this.parent.createSingletonIfNecessary();
      $crisp.push(["set", "session:data", [_payload]]);
    };
    CrispSession2.prototype.pushEvent = function(name, data, color) {
      if (data === void 0) {
        data = {};
      }
      if (color === void 0) {
        color = EventsColors.Blue;
      }
      if (this.parent.isCrispInjected()) {
        window.$crisp.push(["set", "session:event", [[[name, data, color]]]]);
      }
    };
    CrispSession2.prototype.getData = function(key) {
      if (!this.parent.isCrispInjected()) {
        return void 0;
      }
      return window.$crisp.get("session:data", key);
    };
    CrispSession2.prototype.getIdentifier = function() {
      if (!this.parent.isCrispInjected()) {
        return null;
      }
      return window.$crisp.get("session:identifier");
    };
    CrispSession2.prototype.onLoaded = function(callback) {
      this.parent.createSingletonIfNecessary();
      window.$crisp.push(["off", "session:loaded"]);
      window.$crisp.push(["on", "session:loaded", callback]);
    };
    CrispSession2.prototype.isValidDataValue = function(value) {
      return typeof value === "string" || typeof value === "number" || typeof value === "boolean";
    };
    return CrispSession2;
  }()
);
var CrispChat = (
  /** @class */
  function() {
    function CrispChat2(crisp) {
      this.parent = crisp;
    }
    CrispChat2.prototype.show = function() {
      this.parent.autoInjectIfNecessasy();
      window.$crisp.push(["do", "chat:show"]);
    };
    CrispChat2.prototype.hide = function() {
      this.parent.autoInjectIfNecessasy();
      window.$crisp.push(["do", "chat:hide"]);
    };
    CrispChat2.prototype.open = function() {
      this.parent.autoInjectIfNecessasy();
      window.$crisp.push(["do", "chat:open"]);
    };
    CrispChat2.prototype.close = function() {
      if (this.parent.isCrispInjected()) {
        window.$crisp.push(["do", "chat:close"]);
      }
    };
    CrispChat2.prototype.unreadCount = function() {
      if (!this.parent.isCrispInjected()) {
        return 0;
      }
      return window.$crisp.get("chat:unread:count");
    };
    CrispChat2.prototype.isChatOpened = function() {
      if (!this.parent.isCrispInjected()) {
        return false;
      }
      return window.$crisp.is("chat:opened");
    };
    CrispChat2.prototype.isVisible = function() {
      if (!this.parent.isCrispInjected()) {
        return false;
      }
      return window.$crisp.is("chat:visible");
    };
    CrispChat2.prototype.onChatInitiated = function(callback) {
      this.parent.createSingletonIfNecessary();
      window.$crisp.push(["off", "chat:initiated"]);
      window.$crisp.push(["on", "chat:initiated", callback]);
    };
    CrispChat2.prototype.onChatOpened = function(callback) {
      this.parent.createSingletonIfNecessary();
      window.$crisp.push(["off", "chat:opened"]);
      window.$crisp.push(["on", "chat:opened", callback]);
    };
    CrispChat2.prototype.onChatClosed = function(callback) {
      this.parent.createSingletonIfNecessary();
      window.$crisp.push(["off", "chat:closed"]);
      window.$crisp.push(["on", "chat:closed", callback]);
    };
    return CrispChat2;
  }()
);
var ChatboxColors;
(function(ChatboxColors2) {
  ChatboxColors2["Default"] = "default";
  ChatboxColors2["Amber"] = "amber";
  ChatboxColors2["Black"] = "black";
  ChatboxColors2["Blue"] = "blue";
  ChatboxColors2["BlueGrey"] = "blue_grey";
  ChatboxColors2["LightBlue"] = "light_blue";
  ChatboxColors2["Brown"] = "brown";
  ChatboxColors2["Cyan"] = "cyan";
  ChatboxColors2["Green"] = "green";
  ChatboxColors2["LightGreen"] = "light_green";
  ChatboxColors2["Grey"] = "grey";
  ChatboxColors2["Indigo"] = "indigo";
  ChatboxColors2["Orange"] = "orange";
  ChatboxColors2["DeepOrange"] = "deep_orange";
  ChatboxColors2["Pink"] = "pink";
  ChatboxColors2["Purple"] = "purple";
  ChatboxColors2["DeepPurple"] = "deep_purple";
  ChatboxColors2["Red"] = "red";
  ChatboxColors2["Teal"] = "teal";
})(ChatboxColors || (ChatboxColors = {}));
var ChatboxPosition;
(function(ChatboxPosition2) {
  ChatboxPosition2["Left"] = "left";
  ChatboxPosition2["Right"] = "right";
})(ChatboxPosition || (ChatboxPosition = {}));
var Crisp = (
  /** @class */
  function() {
    function Crisp2() {
      this.clientUrl = "https://client.crisp.chat/l.js";
      this.websiteId = "";
      this.autoload = true;
      this.injected = false;
      this.chat = new CrispChat(this);
      this.session = new CrispSession(this);
      this.user = new CrispUser(this);
      this.message = new CrispMessage(this);
      this.trigger = new CrispTrigger(this);
    }
    Crisp2.prototype.configure = function(websiteId, options) {
      if (options === void 0) {
        options = {};
      }
      this.websiteId = websiteId;
      this.tokenId = options.tokenId;
      this.locale = options.locale;
      this.sessionMerge = options.sessionMerge;
      this.cookieDomain = options.cookieDomain;
      this.lockFullview = options.lockFullview;
      this.lockMaximized = options.lockMaximized;
      this.safeMode = options.safeMode;
      if (options.clientUrl !== void 0) {
        this.clientUrl = options.clientUrl;
      }
      if (options.autoload !== void 0) {
        this.autoload = options.autoload;
      }
      if (this.autoload) {
        this.load();
      }
    };
    Crisp2.prototype.load = function() {
      var _head = document.getElementsByTagName("head");
      this.createSingletonIfNecessary();
      if (this.isCrispInjected() === true) {
        return;
      }
      if (!this.websiteId) {
        throw new Error("websiteId must be set before loading Crisp");
      }
      window.CRISP_WEBSITE_ID = this.websiteId;
      window.CRISP_RUNTIME_CONFIG = {};
      if (this.tokenId) {
        window.CRISP_TOKEN_ID = this.tokenId;
      }
      if (this.sessionMerge) {
        window.CRISP_RUNTIME_CONFIG.session_merge = true;
      }
      if (this.locale) {
        window.CRISP_RUNTIME_CONFIG.locale = this.locale;
      }
      if (this.lockFullview) {
        window.CRISP_RUNTIME_CONFIG.lock_full_view = true;
      }
      if (this.lockMaximized) {
        window.CRISP_RUNTIME_CONFIG.lock_maximized = true;
      }
      if (this.cookieDomain) {
        window.CRISP_COOKIE_DOMAIN = this.cookieDomain;
      }
      if (this.cookieExpire) {
        window.CRISP_COOKIE_EXPIRE = this.cookieExpire;
      }
      if (!_head || !_head[0]) {
        return this.deferredLoading();
      }
      if (this.safeMode === true) {
        this.setSafeMode(true);
      }
      var _script = document.createElement("script");
      _script.src = this.clientUrl;
      _script.async = true;
      _head[0].appendChild(_script);
      this.injected = true;
    };
    Crisp2.prototype.setTokenId = function(tokenId) {
      this.tokenId = tokenId;
      if (this.isCrispInjected() === true) {
        if (tokenId) {
          window.CRISP_TOKEN_ID = tokenId;
        } else {
          delete window.CRISP_TOKEN_ID;
        }
      }
    };
    Crisp2.prototype.setZIndex = function(zIndex) {
      this.createSingletonIfNecessary();
      window.$crisp.push(["config", "container:index", [zIndex]]);
    };
    Crisp2.prototype.setColorTheme = function(color) {
      this.createSingletonIfNecessary();
      window.$crisp.push(["config", "color:theme", [color]]);
    };
    Crisp2.prototype.setHideOnAway = function(enabled) {
      this.createSingletonIfNecessary();
      window.$crisp.push(["config", "hide:on:away", [enabled]]);
    };
    Crisp2.prototype.setHideOnMobile = function(enabled) {
      this.createSingletonIfNecessary();
      window.$crisp.push(["config", "hide:on:mobile", [enabled]]);
    };
    Crisp2.prototype.setPosition = function(position) {
      this.createSingletonIfNecessary();
      $crisp.push(["config", "position:reverse", [position === ChatboxPosition.Left]]);
    };
    Crisp2.prototype.setAvailabilityTooltip = function(enabled) {
      this.createSingletonIfNecessary();
      window.$crisp.push(["config", "availability:tooltip", [enabled]]);
    };
    Crisp2.prototype.setVacationMode = function(enabled) {
      this.createSingletonIfNecessary();
      window.$crisp.push(["config", "hide:vacation", [enabled]]);
    };
    Crisp2.prototype.setSafeMode = function(safe) {
      if (safe === void 0) {
        safe = true;
      }
      this.createSingletonIfNecessary();
      window.$crisp.push(["safe", safe]);
    };
    Crisp2.prototype.muteSound = function(mute) {
      this.createSingletonIfNecessary();
      window.$crisp.push(["config", "sound:mute", [mute]]);
    };
    Crisp2.prototype.toggleOperatorCount = function(enabled) {
      this.createSingletonIfNecessary();
      window.$crisp.push(["config", "show:operator:count", [enabled]]);
    };
    Crisp2.prototype.createSingletonIfNecessary = function() {
      if (window.$crisp === void 0) {
        window.$crisp = [];
      }
    };
    Crisp2.prototype.autoInjectIfNecessasy = function() {
      if (!this.isCrispInjected()) {
        this.load();
      }
    };
    Crisp2.prototype.isCrispInjected = function() {
      if (this.injected === true || window.$crisp && window.$crisp.is) {
        return true;
      }
      return false;
    };
    Crisp2.prototype.deferredLoading = function() {
      var _this = this;
      document.addEventListener("DOMContentLoaded", function() {
        _this.load();
      });
    };
    return Crisp2;
  }()
);
var singleton = new Crisp();
export {
  ChatboxColors,
  ChatboxPosition,
  singleton as Crisp,
  Crisp as CrispClass,
  EventsColors
};
//# sourceMappingURL=crisp-sdk-web.js.map
