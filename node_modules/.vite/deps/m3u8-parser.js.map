{
  "version": 3,
  "sources": ["../../global/window.js", "../../@videojs/vhs-utils/es/stream.js", "../../@babel/runtime/helpers/esm/extends.js", "../../@videojs/vhs-utils/es/decode-b64-to-uint8-array.js", "../../m3u8-parser/dist/m3u8-parser.es.js"],
  "sourcesContent": ["var win;\n\nif (typeof window !== \"undefined\") {\n    win = window;\n} else if (typeof global !== \"undefined\") {\n    win = global;\n} else if (typeof self !== \"undefined\"){\n    win = self;\n} else {\n    win = {};\n}\n\nmodule.exports = win;\n", "/**\n * @file stream.js\n */\n\n/**\n * A lightweight readable stream implemention that handles event dispatching.\n *\n * @class Stream\n */\nvar Stream = /*#__PURE__*/function () {\n  function Stream() {\n    this.listeners = {};\n  }\n  /**\n   * Add a listener for a specified event type.\n   *\n   * @param {string} type the event name\n   * @param {Function} listener the callback to be invoked when an event of\n   * the specified type occurs\n   */\n\n\n  var _proto = Stream.prototype;\n\n  _proto.on = function on(type, listener) {\n    if (!this.listeners[type]) {\n      this.listeners[type] = [];\n    }\n\n    this.listeners[type].push(listener);\n  }\n  /**\n   * Remove a listener for a specified event type.\n   *\n   * @param {string} type the event name\n   * @param {Function} listener  a function previously registered for this\n   * type of event through `on`\n   * @return {boolean} if we could turn it off or not\n   */\n  ;\n\n  _proto.off = function off(type, listener) {\n    if (!this.listeners[type]) {\n      return false;\n    }\n\n    var index = this.listeners[type].indexOf(listener); // TODO: which is better?\n    // In Video.js we slice listener functions\n    // on trigger so that it does not mess up the order\n    // while we loop through.\n    //\n    // Here we slice on off so that the loop in trigger\n    // can continue using it's old reference to loop without\n    // messing up the order.\n\n    this.listeners[type] = this.listeners[type].slice(0);\n    this.listeners[type].splice(index, 1);\n    return index > -1;\n  }\n  /**\n   * Trigger an event of the specified type on this stream. Any additional\n   * arguments to this function are passed as parameters to event listeners.\n   *\n   * @param {string} type the event name\n   */\n  ;\n\n  _proto.trigger = function trigger(type) {\n    var callbacks = this.listeners[type];\n\n    if (!callbacks) {\n      return;\n    } // Slicing the arguments on every invocation of this method\n    // can add a significant amount of overhead. Avoid the\n    // intermediate object creation for the common case of a\n    // single callback argument\n\n\n    if (arguments.length === 2) {\n      var length = callbacks.length;\n\n      for (var i = 0; i < length; ++i) {\n        callbacks[i].call(this, arguments[1]);\n      }\n    } else {\n      var args = Array.prototype.slice.call(arguments, 1);\n      var _length = callbacks.length;\n\n      for (var _i = 0; _i < _length; ++_i) {\n        callbacks[_i].apply(this, args);\n      }\n    }\n  }\n  /**\n   * Destroys the stream and cleans up.\n   */\n  ;\n\n  _proto.dispose = function dispose() {\n    this.listeners = {};\n  }\n  /**\n   * Forwards all `data` events on this stream to the destination stream. The\n   * destination stream should provide a method `push` to receive the data\n   * events as they arrive.\n   *\n   * @param {Stream} destination the stream that will receive all `data` events\n   * @see http://nodejs.org/api/stream.html#stream_readable_pipe_destination_options\n   */\n  ;\n\n  _proto.pipe = function pipe(destination) {\n    this.on('data', function (data) {\n      destination.push(data);\n    });\n  };\n\n  return Stream;\n}();\n\nexport { Stream as default };", "export default function _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}", "import window from 'global/window';\n\nvar atob = function atob(s) {\n  return window.atob ? window.atob(s) : Buffer.from(s, 'base64').toString('binary');\n};\n\nexport default function decodeB64ToUint8Array(b64Text) {\n  var decodedString = atob(b64Text);\n  var array = new Uint8Array(decodedString.length);\n\n  for (var i = 0; i < decodedString.length; i++) {\n    array[i] = decodedString.charCodeAt(i);\n  }\n\n  return array;\n}", "/*! @name m3u8-parser @version 7.0.0 @license Apache-2.0 */\nimport Stream from '@videojs/vhs-utils/es/stream.js';\nimport _extends from '@babel/runtime/helpers/extends';\nimport decodeB64ToUint8Array from '@videojs/vhs-utils/es/decode-b64-to-uint8-array.js';\n\n/**\n * @file m3u8/line-stream.js\n */\n/**\n * A stream that buffers string input and generates a `data` event for each\n * line.\n *\n * @class LineStream\n * @extends Stream\n */\n\nclass LineStream extends Stream {\n  constructor() {\n    super();\n    this.buffer = '';\n  }\n  /**\n   * Add new data to be parsed.\n   *\n   * @param {string} data the text to process\n   */\n\n\n  push(data) {\n    let nextNewline;\n    this.buffer += data;\n    nextNewline = this.buffer.indexOf('\\n');\n\n    for (; nextNewline > -1; nextNewline = this.buffer.indexOf('\\n')) {\n      this.trigger('data', this.buffer.substring(0, nextNewline));\n      this.buffer = this.buffer.substring(nextNewline + 1);\n    }\n  }\n\n}\n\nconst TAB = String.fromCharCode(0x09);\n\nconst parseByterange = function (byterangeString) {\n  // optionally match and capture 0+ digits before `@`\n  // optionally match and capture 0+ digits after `@`\n  const match = /([0-9.]*)?@?([0-9.]*)?/.exec(byterangeString || '');\n  const result = {};\n\n  if (match[1]) {\n    result.length = parseInt(match[1], 10);\n  }\n\n  if (match[2]) {\n    result.offset = parseInt(match[2], 10);\n  }\n\n  return result;\n};\n/**\n * \"forgiving\" attribute list psuedo-grammar:\n * attributes -> keyvalue (',' keyvalue)*\n * keyvalue   -> key '=' value\n * key        -> [^=]*\n * value      -> '\"' [^\"]* '\"' | [^,]*\n */\n\n\nconst attributeSeparator = function () {\n  const key = '[^=]*';\n  const value = '\"[^\"]*\"|[^,]*';\n  const keyvalue = '(?:' + key + ')=(?:' + value + ')';\n  return new RegExp('(?:^|,)(' + keyvalue + ')');\n};\n/**\n * Parse attributes from a line given the separator\n *\n * @param {string} attributes the attribute line to parse\n */\n\n\nconst parseAttributes = function (attributes) {\n  const result = {};\n\n  if (!attributes) {\n    return result;\n  } // split the string using attributes as the separator\n\n\n  const attrs = attributes.split(attributeSeparator());\n  let i = attrs.length;\n  let attr;\n\n  while (i--) {\n    // filter out unmatched portions of the string\n    if (attrs[i] === '') {\n      continue;\n    } // split the key and value\n\n\n    attr = /([^=]*)=(.*)/.exec(attrs[i]).slice(1); // trim whitespace and remove optional quotes around the value\n\n    attr[0] = attr[0].replace(/^\\s+|\\s+$/g, '');\n    attr[1] = attr[1].replace(/^\\s+|\\s+$/g, '');\n    attr[1] = attr[1].replace(/^['\"](.*)['\"]$/g, '$1');\n    result[attr[0]] = attr[1];\n  }\n\n  return result;\n};\n/**\n * A line-level M3U8 parser event stream. It expects to receive input one\n * line at a time and performs a context-free parse of its contents. A stream\n * interpretation of a manifest can be useful if the manifest is expected to\n * be too large to fit comfortably into memory or the entirety of the input\n * is not immediately available. Otherwise, it's probably much easier to work\n * with a regular `Parser` object.\n *\n * Produces `data` events with an object that captures the parser's\n * interpretation of the input. That object has a property `tag` that is one\n * of `uri`, `comment`, or `tag`. URIs only have a single additional\n * property, `line`, which captures the entirety of the input without\n * interpretation. Comments similarly have a single additional property\n * `text` which is the input without the leading `#`.\n *\n * Tags always have a property `tagType` which is the lower-cased version of\n * the M3U8 directive without the `#EXT` or `#EXT-X-` prefix. For instance,\n * `#EXT-X-MEDIA-SEQUENCE` becomes `media-sequence` when parsed. Unrecognized\n * tags are given the tag type `unknown` and a single additional property\n * `data` with the remainder of the input.\n *\n * @class ParseStream\n * @extends Stream\n */\n\n\nclass ParseStream extends Stream {\n  constructor() {\n    super();\n    this.customParsers = [];\n    this.tagMappers = [];\n  }\n  /**\n   * Parses an additional line of input.\n   *\n   * @param {string} line a single line of an M3U8 file to parse\n   */\n\n\n  push(line) {\n    let match;\n    let event; // strip whitespace\n\n    line = line.trim();\n\n    if (line.length === 0) {\n      // ignore empty lines\n      return;\n    } // URIs\n\n\n    if (line[0] !== '#') {\n      this.trigger('data', {\n        type: 'uri',\n        uri: line\n      });\n      return;\n    } // map tags\n\n\n    const newLines = this.tagMappers.reduce((acc, mapper) => {\n      const mappedLine = mapper(line); // skip if unchanged\n\n      if (mappedLine === line) {\n        return acc;\n      }\n\n      return acc.concat([mappedLine]);\n    }, [line]);\n    newLines.forEach(newLine => {\n      for (let i = 0; i < this.customParsers.length; i++) {\n        if (this.customParsers[i].call(this, newLine)) {\n          return;\n        }\n      } // Comments\n\n\n      if (newLine.indexOf('#EXT') !== 0) {\n        this.trigger('data', {\n          type: 'comment',\n          text: newLine.slice(1)\n        });\n        return;\n      } // strip off any carriage returns here so the regex matching\n      // doesn't have to account for them.\n\n\n      newLine = newLine.replace('\\r', ''); // Tags\n\n      match = /^#EXTM3U/.exec(newLine);\n\n      if (match) {\n        this.trigger('data', {\n          type: 'tag',\n          tagType: 'm3u'\n        });\n        return;\n      }\n\n      match = /^#EXTINF:([0-9\\.]*)?,?(.*)?$/.exec(newLine);\n\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'inf'\n        };\n\n        if (match[1]) {\n          event.duration = parseFloat(match[1]);\n        }\n\n        if (match[2]) {\n          event.title = match[2];\n        }\n\n        this.trigger('data', event);\n        return;\n      }\n\n      match = /^#EXT-X-TARGETDURATION:([0-9.]*)?/.exec(newLine);\n\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'targetduration'\n        };\n\n        if (match[1]) {\n          event.duration = parseInt(match[1], 10);\n        }\n\n        this.trigger('data', event);\n        return;\n      }\n\n      match = /^#EXT-X-VERSION:([0-9.]*)?/.exec(newLine);\n\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'version'\n        };\n\n        if (match[1]) {\n          event.version = parseInt(match[1], 10);\n        }\n\n        this.trigger('data', event);\n        return;\n      }\n\n      match = /^#EXT-X-MEDIA-SEQUENCE:(\\-?[0-9.]*)?/.exec(newLine);\n\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'media-sequence'\n        };\n\n        if (match[1]) {\n          event.number = parseInt(match[1], 10);\n        }\n\n        this.trigger('data', event);\n        return;\n      }\n\n      match = /^#EXT-X-DISCONTINUITY-SEQUENCE:(\\-?[0-9.]*)?/.exec(newLine);\n\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'discontinuity-sequence'\n        };\n\n        if (match[1]) {\n          event.number = parseInt(match[1], 10);\n        }\n\n        this.trigger('data', event);\n        return;\n      }\n\n      match = /^#EXT-X-PLAYLIST-TYPE:(.*)?$/.exec(newLine);\n\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'playlist-type'\n        };\n\n        if (match[1]) {\n          event.playlistType = match[1];\n        }\n\n        this.trigger('data', event);\n        return;\n      }\n\n      match = /^#EXT-X-BYTERANGE:(.*)?$/.exec(newLine);\n\n      if (match) {\n        event = _extends(parseByterange(match[1]), {\n          type: 'tag',\n          tagType: 'byterange'\n        });\n        this.trigger('data', event);\n        return;\n      }\n\n      match = /^#EXT-X-ALLOW-CACHE:(YES|NO)?/.exec(newLine);\n\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'allow-cache'\n        };\n\n        if (match[1]) {\n          event.allowed = !/NO/.test(match[1]);\n        }\n\n        this.trigger('data', event);\n        return;\n      }\n\n      match = /^#EXT-X-MAP:(.*)$/.exec(newLine);\n\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'map'\n        };\n\n        if (match[1]) {\n          const attributes = parseAttributes(match[1]);\n\n          if (attributes.URI) {\n            event.uri = attributes.URI;\n          }\n\n          if (attributes.BYTERANGE) {\n            event.byterange = parseByterange(attributes.BYTERANGE);\n          }\n        }\n\n        this.trigger('data', event);\n        return;\n      }\n\n      match = /^#EXT-X-STREAM-INF:(.*)$/.exec(newLine);\n\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'stream-inf'\n        };\n\n        if (match[1]) {\n          event.attributes = parseAttributes(match[1]);\n\n          if (event.attributes.RESOLUTION) {\n            const split = event.attributes.RESOLUTION.split('x');\n            const resolution = {};\n\n            if (split[0]) {\n              resolution.width = parseInt(split[0], 10);\n            }\n\n            if (split[1]) {\n              resolution.height = parseInt(split[1], 10);\n            }\n\n            event.attributes.RESOLUTION = resolution;\n          }\n\n          if (event.attributes.BANDWIDTH) {\n            event.attributes.BANDWIDTH = parseInt(event.attributes.BANDWIDTH, 10);\n          }\n\n          if (event.attributes['FRAME-RATE']) {\n            event.attributes['FRAME-RATE'] = parseFloat(event.attributes['FRAME-RATE']);\n          }\n\n          if (event.attributes['PROGRAM-ID']) {\n            event.attributes['PROGRAM-ID'] = parseInt(event.attributes['PROGRAM-ID'], 10);\n          }\n        }\n\n        this.trigger('data', event);\n        return;\n      }\n\n      match = /^#EXT-X-MEDIA:(.*)$/.exec(newLine);\n\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'media'\n        };\n\n        if (match[1]) {\n          event.attributes = parseAttributes(match[1]);\n        }\n\n        this.trigger('data', event);\n        return;\n      }\n\n      match = /^#EXT-X-ENDLIST/.exec(newLine);\n\n      if (match) {\n        this.trigger('data', {\n          type: 'tag',\n          tagType: 'endlist'\n        });\n        return;\n      }\n\n      match = /^#EXT-X-DISCONTINUITY/.exec(newLine);\n\n      if (match) {\n        this.trigger('data', {\n          type: 'tag',\n          tagType: 'discontinuity'\n        });\n        return;\n      }\n\n      match = /^#EXT-X-PROGRAM-DATE-TIME:(.*)$/.exec(newLine);\n\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'program-date-time'\n        };\n\n        if (match[1]) {\n          event.dateTimeString = match[1];\n        }\n\n        this.trigger('data', event);\n        return;\n      }\n\n      match = /^#EXT-X-KEY:(.*)$/.exec(newLine);\n\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'key'\n        };\n\n        if (match[1]) {\n          event.attributes = parseAttributes(match[1]); // parse the IV string into a Uint32Array\n\n          if (event.attributes.IV) {\n            if (event.attributes.IV.substring(0, 2).toLowerCase() === '0x') {\n              event.attributes.IV = event.attributes.IV.substring(2);\n            }\n\n            event.attributes.IV = event.attributes.IV.match(/.{8}/g);\n            event.attributes.IV[0] = parseInt(event.attributes.IV[0], 16);\n            event.attributes.IV[1] = parseInt(event.attributes.IV[1], 16);\n            event.attributes.IV[2] = parseInt(event.attributes.IV[2], 16);\n            event.attributes.IV[3] = parseInt(event.attributes.IV[3], 16);\n            event.attributes.IV = new Uint32Array(event.attributes.IV);\n          }\n        }\n\n        this.trigger('data', event);\n        return;\n      }\n\n      match = /^#EXT-X-START:(.*)$/.exec(newLine);\n\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'start'\n        };\n\n        if (match[1]) {\n          event.attributes = parseAttributes(match[1]);\n          event.attributes['TIME-OFFSET'] = parseFloat(event.attributes['TIME-OFFSET']);\n          event.attributes.PRECISE = /YES/.test(event.attributes.PRECISE);\n        }\n\n        this.trigger('data', event);\n        return;\n      }\n\n      match = /^#EXT-X-CUE-OUT-CONT:(.*)?$/.exec(newLine);\n\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'cue-out-cont'\n        };\n\n        if (match[1]) {\n          event.data = match[1];\n        } else {\n          event.data = '';\n        }\n\n        this.trigger('data', event);\n        return;\n      }\n\n      match = /^#EXT-X-CUE-OUT:(.*)?$/.exec(newLine);\n\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'cue-out'\n        };\n\n        if (match[1]) {\n          event.data = match[1];\n        } else {\n          event.data = '';\n        }\n\n        this.trigger('data', event);\n        return;\n      }\n\n      match = /^#EXT-X-CUE-IN:(.*)?$/.exec(newLine);\n\n      if (match) {\n        event = {\n          type: 'tag',\n          tagType: 'cue-in'\n        };\n\n        if (match[1]) {\n          event.data = match[1];\n        } else {\n          event.data = '';\n        }\n\n        this.trigger('data', event);\n        return;\n      }\n\n      match = /^#EXT-X-SKIP:(.*)$/.exec(newLine);\n\n      if (match && match[1]) {\n        event = {\n          type: 'tag',\n          tagType: 'skip'\n        };\n        event.attributes = parseAttributes(match[1]);\n\n        if (event.attributes.hasOwnProperty('SKIPPED-SEGMENTS')) {\n          event.attributes['SKIPPED-SEGMENTS'] = parseInt(event.attributes['SKIPPED-SEGMENTS'], 10);\n        }\n\n        if (event.attributes.hasOwnProperty('RECENTLY-REMOVED-DATERANGES')) {\n          event.attributes['RECENTLY-REMOVED-DATERANGES'] = event.attributes['RECENTLY-REMOVED-DATERANGES'].split(TAB);\n        }\n\n        this.trigger('data', event);\n        return;\n      }\n\n      match = /^#EXT-X-PART:(.*)$/.exec(newLine);\n\n      if (match && match[1]) {\n        event = {\n          type: 'tag',\n          tagType: 'part'\n        };\n        event.attributes = parseAttributes(match[1]);\n        ['DURATION'].forEach(function (key) {\n          if (event.attributes.hasOwnProperty(key)) {\n            event.attributes[key] = parseFloat(event.attributes[key]);\n          }\n        });\n        ['INDEPENDENT', 'GAP'].forEach(function (key) {\n          if (event.attributes.hasOwnProperty(key)) {\n            event.attributes[key] = /YES/.test(event.attributes[key]);\n          }\n        });\n\n        if (event.attributes.hasOwnProperty('BYTERANGE')) {\n          event.attributes.byterange = parseByterange(event.attributes.BYTERANGE);\n        }\n\n        this.trigger('data', event);\n        return;\n      }\n\n      match = /^#EXT-X-SERVER-CONTROL:(.*)$/.exec(newLine);\n\n      if (match && match[1]) {\n        event = {\n          type: 'tag',\n          tagType: 'server-control'\n        };\n        event.attributes = parseAttributes(match[1]);\n        ['CAN-SKIP-UNTIL', 'PART-HOLD-BACK', 'HOLD-BACK'].forEach(function (key) {\n          if (event.attributes.hasOwnProperty(key)) {\n            event.attributes[key] = parseFloat(event.attributes[key]);\n          }\n        });\n        ['CAN-SKIP-DATERANGES', 'CAN-BLOCK-RELOAD'].forEach(function (key) {\n          if (event.attributes.hasOwnProperty(key)) {\n            event.attributes[key] = /YES/.test(event.attributes[key]);\n          }\n        });\n        this.trigger('data', event);\n        return;\n      }\n\n      match = /^#EXT-X-PART-INF:(.*)$/.exec(newLine);\n\n      if (match && match[1]) {\n        event = {\n          type: 'tag',\n          tagType: 'part-inf'\n        };\n        event.attributes = parseAttributes(match[1]);\n        ['PART-TARGET'].forEach(function (key) {\n          if (event.attributes.hasOwnProperty(key)) {\n            event.attributes[key] = parseFloat(event.attributes[key]);\n          }\n        });\n        this.trigger('data', event);\n        return;\n      }\n\n      match = /^#EXT-X-PRELOAD-HINT:(.*)$/.exec(newLine);\n\n      if (match && match[1]) {\n        event = {\n          type: 'tag',\n          tagType: 'preload-hint'\n        };\n        event.attributes = parseAttributes(match[1]);\n        ['BYTERANGE-START', 'BYTERANGE-LENGTH'].forEach(function (key) {\n          if (event.attributes.hasOwnProperty(key)) {\n            event.attributes[key] = parseInt(event.attributes[key], 10);\n            const subkey = key === 'BYTERANGE-LENGTH' ? 'length' : 'offset';\n            event.attributes.byterange = event.attributes.byterange || {};\n            event.attributes.byterange[subkey] = event.attributes[key]; // only keep the parsed byterange object.\n\n            delete event.attributes[key];\n          }\n        });\n        this.trigger('data', event);\n        return;\n      }\n\n      match = /^#EXT-X-RENDITION-REPORT:(.*)$/.exec(newLine);\n\n      if (match && match[1]) {\n        event = {\n          type: 'tag',\n          tagType: 'rendition-report'\n        };\n        event.attributes = parseAttributes(match[1]);\n        ['LAST-MSN', 'LAST-PART'].forEach(function (key) {\n          if (event.attributes.hasOwnProperty(key)) {\n            event.attributes[key] = parseInt(event.attributes[key], 10);\n          }\n        });\n        this.trigger('data', event);\n        return;\n      }\n\n      match = /^#EXT-X-DATERANGE:(.*)$/.exec(newLine);\n\n      if (match && match[1]) {\n        event = {\n          type: 'tag',\n          tagType: 'daterange'\n        };\n        event.attributes = parseAttributes(match[1]);\n        ['ID', 'CLASS'].forEach(function (key) {\n          if (event.attributes.hasOwnProperty(key)) {\n            event.attributes[key] = String(event.attributes[key]);\n          }\n        });\n        ['START-DATE', 'END-DATE'].forEach(function (key) {\n          if (event.attributes.hasOwnProperty(key)) {\n            event.attributes[key] = new Date(event.attributes[key]);\n          }\n        });\n        ['DURATION', 'PLANNED-DURATION'].forEach(function (key) {\n          if (event.attributes.hasOwnProperty(key)) {\n            event.attributes[key] = parseFloat(event.attributes[key]);\n          }\n        });\n        ['END-ON-NEXT'].forEach(function (key) {\n          if (event.attributes.hasOwnProperty(key)) {\n            event.attributes[key] = /YES/i.test(event.attributes[key]);\n          }\n        });\n        ['SCTE35-CMD', ' SCTE35-OUT', 'SCTE35-IN'].forEach(function (key) {\n          if (event.attributes.hasOwnProperty(key)) {\n            event.attributes[key] = event.attributes[key].toString(16);\n          }\n        });\n        const clientAttributePattern = /^X-([A-Z]+-)+[A-Z]+$/;\n\n        for (const key in event.attributes) {\n          if (!clientAttributePattern.test(key)) {\n            continue;\n          }\n\n          const isHexaDecimal = /[0-9A-Fa-f]{6}/g.test(event.attributes[key]);\n          const isDecimalFloating = /^\\d+(\\.\\d+)?$/.test(event.attributes[key]);\n          event.attributes[key] = isHexaDecimal ? event.attributes[key].toString(16) : isDecimalFloating ? parseFloat(event.attributes[key]) : String(event.attributes[key]);\n        }\n\n        this.trigger('data', event);\n        return;\n      }\n\n      match = /^#EXT-X-INDEPENDENT-SEGMENTS/.exec(newLine);\n\n      if (match) {\n        this.trigger('data', {\n          type: 'tag',\n          tagType: 'independent-segments'\n        });\n        return;\n      } // unknown tag type\n\n\n      this.trigger('data', {\n        type: 'tag',\n        data: newLine.slice(4)\n      });\n    });\n  }\n  /**\n   * Add a parser for custom headers\n   *\n   * @param {Object}   options              a map of options for the added parser\n   * @param {RegExp}   options.expression   a regular expression to match the custom header\n   * @param {string}   options.customType   the custom type to register to the output\n   * @param {Function} [options.dataParser] function to parse the line into an object\n   * @param {boolean}  [options.segment]    should tag data be attached to the segment object\n   */\n\n\n  addParser({\n    expression,\n    customType,\n    dataParser,\n    segment\n  }) {\n    if (typeof dataParser !== 'function') {\n      dataParser = line => line;\n    }\n\n    this.customParsers.push(line => {\n      const match = expression.exec(line);\n\n      if (match) {\n        this.trigger('data', {\n          type: 'custom',\n          data: dataParser(line),\n          customType,\n          segment\n        });\n        return true;\n      }\n    });\n  }\n  /**\n   * Add a custom header mapper\n   *\n   * @param {Object}   options\n   * @param {RegExp}   options.expression   a regular expression to match the custom header\n   * @param {Function} options.map          function to translate tag into a different tag\n   */\n\n\n  addTagMapper({\n    expression,\n    map\n  }) {\n    const mapFn = line => {\n      if (expression.test(line)) {\n        return map(line);\n      }\n\n      return line;\n    };\n\n    this.tagMappers.push(mapFn);\n  }\n\n}\n\nconst camelCase = str => str.toLowerCase().replace(/-(\\w)/g, a => a[1].toUpperCase());\n\nconst camelCaseKeys = function (attributes) {\n  const result = {};\n  Object.keys(attributes).forEach(function (key) {\n    result[camelCase(key)] = attributes[key];\n  });\n  return result;\n}; // set SERVER-CONTROL hold back based upon targetDuration and partTargetDuration\n// we need this helper because defaults are based upon targetDuration and\n// partTargetDuration being set, but they may not be if SERVER-CONTROL appears before\n// target durations are set.\n\n\nconst setHoldBack = function (manifest) {\n  const {\n    serverControl,\n    targetDuration,\n    partTargetDuration\n  } = manifest;\n\n  if (!serverControl) {\n    return;\n  }\n\n  const tag = '#EXT-X-SERVER-CONTROL';\n  const hb = 'holdBack';\n  const phb = 'partHoldBack';\n  const minTargetDuration = targetDuration && targetDuration * 3;\n  const minPartDuration = partTargetDuration && partTargetDuration * 2;\n\n  if (targetDuration && !serverControl.hasOwnProperty(hb)) {\n    serverControl[hb] = minTargetDuration;\n    this.trigger('info', {\n      message: `${tag} defaulting HOLD-BACK to targetDuration * 3 (${minTargetDuration}).`\n    });\n  }\n\n  if (minTargetDuration && serverControl[hb] < minTargetDuration) {\n    this.trigger('warn', {\n      message: `${tag} clamping HOLD-BACK (${serverControl[hb]}) to targetDuration * 3 (${minTargetDuration})`\n    });\n    serverControl[hb] = minTargetDuration;\n  } // default no part hold back to part target duration * 3\n\n\n  if (partTargetDuration && !serverControl.hasOwnProperty(phb)) {\n    serverControl[phb] = partTargetDuration * 3;\n    this.trigger('info', {\n      message: `${tag} defaulting PART-HOLD-BACK to partTargetDuration * 3 (${serverControl[phb]}).`\n    });\n  } // if part hold back is too small default it to part target duration * 2\n\n\n  if (partTargetDuration && serverControl[phb] < minPartDuration) {\n    this.trigger('warn', {\n      message: `${tag} clamping PART-HOLD-BACK (${serverControl[phb]}) to partTargetDuration * 2 (${minPartDuration}).`\n    });\n    serverControl[phb] = minPartDuration;\n  }\n};\n/**\n * A parser for M3U8 files. The current interpretation of the input is\n * exposed as a property `manifest` on parser objects. It's just two lines to\n * create and parse a manifest once you have the contents available as a string:\n *\n * ```js\n * var parser = new m3u8.Parser();\n * parser.push(xhr.responseText);\n * ```\n *\n * New input can later be applied to update the manifest object by calling\n * `push` again.\n *\n * The parser attempts to create a usable manifest object even if the\n * underlying input is somewhat nonsensical. It emits `info` and `warning`\n * events during the parse if it encounters input that seems invalid or\n * requires some property of the manifest object to be defaulted.\n *\n * @class Parser\n * @extends Stream\n */\n\n\nclass Parser extends Stream {\n  constructor() {\n    super();\n    this.lineStream = new LineStream();\n    this.parseStream = new ParseStream();\n    this.lineStream.pipe(this.parseStream);\n    this.lastProgramDateTime = null;\n    /* eslint-disable consistent-this */\n\n    const self = this;\n    /* eslint-enable consistent-this */\n\n    const uris = [];\n    let currentUri = {}; // if specified, the active EXT-X-MAP definition\n\n    let currentMap; // if specified, the active decryption key\n\n    let key;\n    let hasParts = false;\n\n    const noop = function () {};\n\n    const defaultMediaGroups = {\n      'AUDIO': {},\n      'VIDEO': {},\n      'CLOSED-CAPTIONS': {},\n      'SUBTITLES': {}\n    }; // This is the Widevine UUID from DASH IF IOP. The same exact string is\n    // used in MPDs with Widevine encrypted streams.\n\n    const widevineUuid = 'urn:uuid:edef8ba9-79d6-4ace-a3c8-27dcd51d21ed'; // group segments into numbered timelines delineated by discontinuities\n\n    let currentTimeline = 0; // the manifest is empty until the parse stream begins delivering data\n\n    this.manifest = {\n      allowCache: true,\n      discontinuityStarts: [],\n      dateRanges: [],\n      segments: []\n    }; // keep track of the last seen segment's byte range end, as segments are not required\n    // to provide the offset, in which case it defaults to the next byte after the\n    // previous segment\n\n    let lastByterangeEnd = 0; // keep track of the last seen part's byte range end.\n\n    let lastPartByterangeEnd = 0;\n    const dateRangeTags = {};\n    this.on('end', () => {\n      // only add preloadSegment if we don't yet have a uri for it.\n      // and we actually have parts/preloadHints\n      if (currentUri.uri || !currentUri.parts && !currentUri.preloadHints) {\n        return;\n      }\n\n      if (!currentUri.map && currentMap) {\n        currentUri.map = currentMap;\n      }\n\n      if (!currentUri.key && key) {\n        currentUri.key = key;\n      }\n\n      if (!currentUri.timeline && typeof currentTimeline === 'number') {\n        currentUri.timeline = currentTimeline;\n      }\n\n      this.manifest.preloadSegment = currentUri;\n    }); // update the manifest with the m3u8 entry from the parse stream\n\n    this.parseStream.on('data', function (entry) {\n      let mediaGroup;\n      let rendition;\n      ({\n        tag() {\n          // switch based on the tag type\n          (({\n            version() {\n              if (entry.version) {\n                this.manifest.version = entry.version;\n              }\n            },\n\n            'allow-cache'() {\n              this.manifest.allowCache = entry.allowed;\n\n              if (!('allowed' in entry)) {\n                this.trigger('info', {\n                  message: 'defaulting allowCache to YES'\n                });\n                this.manifest.allowCache = true;\n              }\n            },\n\n            byterange() {\n              const byterange = {};\n\n              if ('length' in entry) {\n                currentUri.byterange = byterange;\n                byterange.length = entry.length;\n\n                if (!('offset' in entry)) {\n                  /*\n                   * From the latest spec (as of this writing):\n                   * https://tools.ietf.org/html/draft-pantos-http-live-streaming-23#section-4.3.2.2\n                   *\n                   * Same text since EXT-X-BYTERANGE's introduction in draft 7:\n                   * https://tools.ietf.org/html/draft-pantos-http-live-streaming-07#section-3.3.1)\n                   *\n                   * \"If o [offset] is not present, the sub-range begins at the next byte\n                   * following the sub-range of the previous media segment.\"\n                   */\n                  entry.offset = lastByterangeEnd;\n                }\n              }\n\n              if ('offset' in entry) {\n                currentUri.byterange = byterange;\n                byterange.offset = entry.offset;\n              }\n\n              lastByterangeEnd = byterange.offset + byterange.length;\n            },\n\n            endlist() {\n              this.manifest.endList = true;\n            },\n\n            inf() {\n              if (!('mediaSequence' in this.manifest)) {\n                this.manifest.mediaSequence = 0;\n                this.trigger('info', {\n                  message: 'defaulting media sequence to zero'\n                });\n              }\n\n              if (!('discontinuitySequence' in this.manifest)) {\n                this.manifest.discontinuitySequence = 0;\n                this.trigger('info', {\n                  message: 'defaulting discontinuity sequence to zero'\n                });\n              }\n\n              if (entry.title) {\n                currentUri.title = entry.title;\n              }\n\n              if (entry.duration > 0) {\n                currentUri.duration = entry.duration;\n              }\n\n              if (entry.duration === 0) {\n                currentUri.duration = 0.01;\n                this.trigger('info', {\n                  message: 'updating zero segment duration to a small value'\n                });\n              }\n\n              this.manifest.segments = uris;\n            },\n\n            key() {\n              if (!entry.attributes) {\n                this.trigger('warn', {\n                  message: 'ignoring key declaration without attribute list'\n                });\n                return;\n              } // clear the active encryption key\n\n\n              if (entry.attributes.METHOD === 'NONE') {\n                key = null;\n                return;\n              }\n\n              if (!entry.attributes.URI) {\n                this.trigger('warn', {\n                  message: 'ignoring key declaration without URI'\n                });\n                return;\n              }\n\n              if (entry.attributes.KEYFORMAT === 'com.apple.streamingkeydelivery') {\n                this.manifest.contentProtection = this.manifest.contentProtection || {}; // TODO: add full support for this.\n\n                this.manifest.contentProtection['com.apple.fps.1_0'] = {\n                  attributes: entry.attributes\n                };\n                return;\n              }\n\n              if (entry.attributes.KEYFORMAT === 'com.microsoft.playready') {\n                this.manifest.contentProtection = this.manifest.contentProtection || {}; // TODO: add full support for this.\n\n                this.manifest.contentProtection['com.microsoft.playready'] = {\n                  uri: entry.attributes.URI\n                };\n                return;\n              } // check if the content is encrypted for Widevine\n              // Widevine/HLS spec: https://storage.googleapis.com/wvdocs/Widevine_DRM_HLS.pdf\n\n\n              if (entry.attributes.KEYFORMAT === widevineUuid) {\n                const VALID_METHODS = ['SAMPLE-AES', 'SAMPLE-AES-CTR', 'SAMPLE-AES-CENC'];\n\n                if (VALID_METHODS.indexOf(entry.attributes.METHOD) === -1) {\n                  this.trigger('warn', {\n                    message: 'invalid key method provided for Widevine'\n                  });\n                  return;\n                }\n\n                if (entry.attributes.METHOD === 'SAMPLE-AES-CENC') {\n                  this.trigger('warn', {\n                    message: 'SAMPLE-AES-CENC is deprecated, please use SAMPLE-AES-CTR instead'\n                  });\n                }\n\n                if (entry.attributes.URI.substring(0, 23) !== 'data:text/plain;base64,') {\n                  this.trigger('warn', {\n                    message: 'invalid key URI provided for Widevine'\n                  });\n                  return;\n                }\n\n                if (!(entry.attributes.KEYID && entry.attributes.KEYID.substring(0, 2) === '0x')) {\n                  this.trigger('warn', {\n                    message: 'invalid key ID provided for Widevine'\n                  });\n                  return;\n                } // if Widevine key attributes are valid, store them as `contentProtection`\n                // on the manifest to emulate Widevine tag structure in a DASH mpd\n\n\n                this.manifest.contentProtection = this.manifest.contentProtection || {};\n                this.manifest.contentProtection['com.widevine.alpha'] = {\n                  attributes: {\n                    schemeIdUri: entry.attributes.KEYFORMAT,\n                    // remove '0x' from the key id string\n                    keyId: entry.attributes.KEYID.substring(2)\n                  },\n                  // decode the base64-encoded PSSH box\n                  pssh: decodeB64ToUint8Array(entry.attributes.URI.split(',')[1])\n                };\n                return;\n              }\n\n              if (!entry.attributes.METHOD) {\n                this.trigger('warn', {\n                  message: 'defaulting key method to AES-128'\n                });\n              } // setup an encryption key for upcoming segments\n\n\n              key = {\n                method: entry.attributes.METHOD || 'AES-128',\n                uri: entry.attributes.URI\n              };\n\n              if (typeof entry.attributes.IV !== 'undefined') {\n                key.iv = entry.attributes.IV;\n              }\n            },\n\n            'media-sequence'() {\n              if (!isFinite(entry.number)) {\n                this.trigger('warn', {\n                  message: 'ignoring invalid media sequence: ' + entry.number\n                });\n                return;\n              }\n\n              this.manifest.mediaSequence = entry.number;\n            },\n\n            'discontinuity-sequence'() {\n              if (!isFinite(entry.number)) {\n                this.trigger('warn', {\n                  message: 'ignoring invalid discontinuity sequence: ' + entry.number\n                });\n                return;\n              }\n\n              this.manifest.discontinuitySequence = entry.number;\n              currentTimeline = entry.number;\n            },\n\n            'playlist-type'() {\n              if (!/VOD|EVENT/.test(entry.playlistType)) {\n                this.trigger('warn', {\n                  message: 'ignoring unknown playlist type: ' + entry.playlist\n                });\n                return;\n              }\n\n              this.manifest.playlistType = entry.playlistType;\n            },\n\n            map() {\n              currentMap = {};\n\n              if (entry.uri) {\n                currentMap.uri = entry.uri;\n              }\n\n              if (entry.byterange) {\n                currentMap.byterange = entry.byterange;\n              }\n\n              if (key) {\n                currentMap.key = key;\n              }\n            },\n\n            'stream-inf'() {\n              this.manifest.playlists = uris;\n              this.manifest.mediaGroups = this.manifest.mediaGroups || defaultMediaGroups;\n\n              if (!entry.attributes) {\n                this.trigger('warn', {\n                  message: 'ignoring empty stream-inf attributes'\n                });\n                return;\n              }\n\n              if (!currentUri.attributes) {\n                currentUri.attributes = {};\n              }\n\n              _extends(currentUri.attributes, entry.attributes);\n            },\n\n            media() {\n              this.manifest.mediaGroups = this.manifest.mediaGroups || defaultMediaGroups;\n\n              if (!(entry.attributes && entry.attributes.TYPE && entry.attributes['GROUP-ID'] && entry.attributes.NAME)) {\n                this.trigger('warn', {\n                  message: 'ignoring incomplete or missing media group'\n                });\n                return;\n              } // find the media group, creating defaults as necessary\n\n\n              const mediaGroupType = this.manifest.mediaGroups[entry.attributes.TYPE];\n              mediaGroupType[entry.attributes['GROUP-ID']] = mediaGroupType[entry.attributes['GROUP-ID']] || {};\n              mediaGroup = mediaGroupType[entry.attributes['GROUP-ID']]; // collect the rendition metadata\n\n              rendition = {\n                default: /yes/i.test(entry.attributes.DEFAULT)\n              };\n\n              if (rendition.default) {\n                rendition.autoselect = true;\n              } else {\n                rendition.autoselect = /yes/i.test(entry.attributes.AUTOSELECT);\n              }\n\n              if (entry.attributes.LANGUAGE) {\n                rendition.language = entry.attributes.LANGUAGE;\n              }\n\n              if (entry.attributes.URI) {\n                rendition.uri = entry.attributes.URI;\n              }\n\n              if (entry.attributes['INSTREAM-ID']) {\n                rendition.instreamId = entry.attributes['INSTREAM-ID'];\n              }\n\n              if (entry.attributes.CHARACTERISTICS) {\n                rendition.characteristics = entry.attributes.CHARACTERISTICS;\n              }\n\n              if (entry.attributes.FORCED) {\n                rendition.forced = /yes/i.test(entry.attributes.FORCED);\n              } // insert the new rendition\n\n\n              mediaGroup[entry.attributes.NAME] = rendition;\n            },\n\n            discontinuity() {\n              currentTimeline += 1;\n              currentUri.discontinuity = true;\n              this.manifest.discontinuityStarts.push(uris.length);\n            },\n\n            'program-date-time'() {\n              const {\n                lastProgramDateTime\n              } = this;\n              this.lastProgramDateTime = new Date(entry.dateTimeString).getTime(); // We should extrapolate Program Date Time backward only during first program date time occurrence.\n              // Once we have at least one program date time point, we can always extrapolate it forward using lastProgramDateTime reference.\n\n              if (lastProgramDateTime === null) {\n                // Extrapolate Program Date Time backward\n                // Since it is first program date time occurrence we're assuming that\n                // all this.manifest.segments have no program date time info\n                this.manifest.segments.reduceRight((programDateTime, segment) => {\n                  segment.programDateTime = programDateTime - segment.duration * 1000;\n                  return segment.programDateTime;\n                }, this.lastProgramDateTime);\n              }\n            },\n\n            targetduration() {\n              if (!isFinite(entry.duration) || entry.duration < 0) {\n                this.trigger('warn', {\n                  message: 'ignoring invalid target duration: ' + entry.duration\n                });\n                return;\n              }\n\n              this.manifest.targetDuration = entry.duration;\n              setHoldBack.call(this, this.manifest);\n            },\n\n            start() {\n              if (!entry.attributes || isNaN(entry.attributes['TIME-OFFSET'])) {\n                this.trigger('warn', {\n                  message: 'ignoring start declaration without appropriate attribute list'\n                });\n                return;\n              }\n\n              this.manifest.start = {\n                timeOffset: entry.attributes['TIME-OFFSET'],\n                precise: entry.attributes.PRECISE\n              };\n            },\n\n            'cue-out'() {\n              currentUri.cueOut = entry.data;\n            },\n\n            'cue-out-cont'() {\n              currentUri.cueOutCont = entry.data;\n            },\n\n            'cue-in'() {\n              currentUri.cueIn = entry.data;\n            },\n\n            'skip'() {\n              this.manifest.skip = camelCaseKeys(entry.attributes);\n              this.warnOnMissingAttributes_('#EXT-X-SKIP', entry.attributes, ['SKIPPED-SEGMENTS']);\n            },\n\n            'part'() {\n              hasParts = true; // parts are always specifed before a segment\n\n              const segmentIndex = this.manifest.segments.length;\n              const part = camelCaseKeys(entry.attributes);\n              currentUri.parts = currentUri.parts || [];\n              currentUri.parts.push(part);\n\n              if (part.byterange) {\n                if (!part.byterange.hasOwnProperty('offset')) {\n                  part.byterange.offset = lastPartByterangeEnd;\n                }\n\n                lastPartByterangeEnd = part.byterange.offset + part.byterange.length;\n              }\n\n              const partIndex = currentUri.parts.length - 1;\n              this.warnOnMissingAttributes_(`#EXT-X-PART #${partIndex} for segment #${segmentIndex}`, entry.attributes, ['URI', 'DURATION']);\n\n              if (this.manifest.renditionReports) {\n                this.manifest.renditionReports.forEach((r, i) => {\n                  if (!r.hasOwnProperty('lastPart')) {\n                    this.trigger('warn', {\n                      message: `#EXT-X-RENDITION-REPORT #${i} lacks required attribute(s): LAST-PART`\n                    });\n                  }\n                });\n              }\n            },\n\n            'server-control'() {\n              const attrs = this.manifest.serverControl = camelCaseKeys(entry.attributes);\n\n              if (!attrs.hasOwnProperty('canBlockReload')) {\n                attrs.canBlockReload = false;\n                this.trigger('info', {\n                  message: '#EXT-X-SERVER-CONTROL defaulting CAN-BLOCK-RELOAD to false'\n                });\n              }\n\n              setHoldBack.call(this, this.manifest);\n\n              if (attrs.canSkipDateranges && !attrs.hasOwnProperty('canSkipUntil')) {\n                this.trigger('warn', {\n                  message: '#EXT-X-SERVER-CONTROL lacks required attribute CAN-SKIP-UNTIL which is required when CAN-SKIP-DATERANGES is set'\n                });\n              }\n            },\n\n            'preload-hint'() {\n              // parts are always specifed before a segment\n              const segmentIndex = this.manifest.segments.length;\n              const hint = camelCaseKeys(entry.attributes);\n              const isPart = hint.type && hint.type === 'PART';\n              currentUri.preloadHints = currentUri.preloadHints || [];\n              currentUri.preloadHints.push(hint);\n\n              if (hint.byterange) {\n                if (!hint.byterange.hasOwnProperty('offset')) {\n                  // use last part byterange end or zero if not a part.\n                  hint.byterange.offset = isPart ? lastPartByterangeEnd : 0;\n\n                  if (isPart) {\n                    lastPartByterangeEnd = hint.byterange.offset + hint.byterange.length;\n                  }\n                }\n              }\n\n              const index = currentUri.preloadHints.length - 1;\n              this.warnOnMissingAttributes_(`#EXT-X-PRELOAD-HINT #${index} for segment #${segmentIndex}`, entry.attributes, ['TYPE', 'URI']);\n\n              if (!hint.type) {\n                return;\n              } // search through all preload hints except for the current one for\n              // a duplicate type.\n\n\n              for (let i = 0; i < currentUri.preloadHints.length - 1; i++) {\n                const otherHint = currentUri.preloadHints[i];\n\n                if (!otherHint.type) {\n                  continue;\n                }\n\n                if (otherHint.type === hint.type) {\n                  this.trigger('warn', {\n                    message: `#EXT-X-PRELOAD-HINT #${index} for segment #${segmentIndex} has the same TYPE ${hint.type} as preload hint #${i}`\n                  });\n                }\n              }\n            },\n\n            'rendition-report'() {\n              const report = camelCaseKeys(entry.attributes);\n              this.manifest.renditionReports = this.manifest.renditionReports || [];\n              this.manifest.renditionReports.push(report);\n              const index = this.manifest.renditionReports.length - 1;\n              const required = ['LAST-MSN', 'URI'];\n\n              if (hasParts) {\n                required.push('LAST-PART');\n              }\n\n              this.warnOnMissingAttributes_(`#EXT-X-RENDITION-REPORT #${index}`, entry.attributes, required);\n            },\n\n            'part-inf'() {\n              this.manifest.partInf = camelCaseKeys(entry.attributes);\n              this.warnOnMissingAttributes_('#EXT-X-PART-INF', entry.attributes, ['PART-TARGET']);\n\n              if (this.manifest.partInf.partTarget) {\n                this.manifest.partTargetDuration = this.manifest.partInf.partTarget;\n              }\n\n              setHoldBack.call(this, this.manifest);\n            },\n\n            'daterange'() {\n              this.manifest.dateRanges.push(camelCaseKeys(entry.attributes));\n              const index = this.manifest.dateRanges.length - 1;\n              this.warnOnMissingAttributes_(`#EXT-X-DATERANGE #${index}`, entry.attributes, ['ID', 'START-DATE']);\n              const dateRange = this.manifest.dateRanges[index];\n\n              if (dateRange.endDate && dateRange.startDate && new Date(dateRange.endDate) < new Date(dateRange.startDate)) {\n                this.trigger('warn', {\n                  message: 'EXT-X-DATERANGE END-DATE must be equal to or later than the value of the START-DATE'\n                });\n              }\n\n              if (dateRange.duration && dateRange.duration < 0) {\n                this.trigger('warn', {\n                  message: 'EXT-X-DATERANGE DURATION must not be negative'\n                });\n              }\n\n              if (dateRange.plannedDuration && dateRange.plannedDuration < 0) {\n                this.trigger('warn', {\n                  message: 'EXT-X-DATERANGE PLANNED-DURATION must not be negative'\n                });\n              }\n\n              const endOnNextYes = !!dateRange.endOnNext;\n\n              if (endOnNextYes && !dateRange.class) {\n                this.trigger('warn', {\n                  message: 'EXT-X-DATERANGE with an END-ON-NEXT=YES attribute must have a CLASS attribute'\n                });\n              }\n\n              if (endOnNextYes && (dateRange.duration || dateRange.endDate)) {\n                this.trigger('warn', {\n                  message: 'EXT-X-DATERANGE with an END-ON-NEXT=YES attribute must not contain DURATION or END-DATE attributes'\n                });\n              }\n\n              if (dateRange.duration && dateRange.endDate) {\n                const startDate = dateRange.startDate;\n                const newDateInSeconds = startDate.setSeconds(startDate.getSeconds() + dateRange.duration);\n                this.manifest.dateRanges[index].endDate = new Date(newDateInSeconds);\n              }\n\n              if (!dateRangeTags[dateRange.id]) {\n                dateRangeTags[dateRange.id] = dateRange;\n              } else {\n                for (const attribute in dateRangeTags[dateRange.id]) {\n                  if (dateRangeTags[dateRange.id][attribute] !== dateRange[attribute]) {\n                    this.trigger('warn', {\n                      message: 'EXT-X-DATERANGE tags with the same ID in a playlist must have the same attributes and same attribute values'\n                    });\n                    break;\n                  }\n                }\n              }\n            },\n\n            'independent-segments'() {\n              this.manifest.independentSegments = true;\n            }\n\n          })[entry.tagType] || noop).call(self);\n        },\n\n        uri() {\n          currentUri.uri = entry.uri;\n          uris.push(currentUri); // if no explicit duration was declared, use the target duration\n\n          if (this.manifest.targetDuration && !('duration' in currentUri)) {\n            this.trigger('warn', {\n              message: 'defaulting segment duration to the target duration'\n            });\n            currentUri.duration = this.manifest.targetDuration;\n          } // annotate with encryption information, if necessary\n\n\n          if (key) {\n            currentUri.key = key;\n          }\n\n          currentUri.timeline = currentTimeline; // annotate with initialization segment information, if necessary\n\n          if (currentMap) {\n            currentUri.map = currentMap;\n          } // reset the last byterange end as it needs to be 0 between parts\n\n\n          lastPartByterangeEnd = 0; // Once we have at least one program date time we can always extrapolate it forward\n\n          if (this.lastProgramDateTime !== null) {\n            currentUri.programDateTime = this.lastProgramDateTime;\n            this.lastProgramDateTime += currentUri.duration * 1000;\n          } // prepare for the next URI\n\n\n          currentUri = {};\n        },\n\n        comment() {// comments are not important for playback\n        },\n\n        custom() {\n          // if this is segment-level data attach the output to the segment\n          if (entry.segment) {\n            currentUri.custom = currentUri.custom || {};\n            currentUri.custom[entry.customType] = entry.data; // if this is manifest-level data attach to the top level manifest object\n          } else {\n            this.manifest.custom = this.manifest.custom || {};\n            this.manifest.custom[entry.customType] = entry.data;\n          }\n        }\n\n      })[entry.type].call(self);\n    });\n  }\n\n  warnOnMissingAttributes_(identifier, attributes, required) {\n    const missing = [];\n    required.forEach(function (key) {\n      if (!attributes.hasOwnProperty(key)) {\n        missing.push(key);\n      }\n    });\n\n    if (missing.length) {\n      this.trigger('warn', {\n        message: `${identifier} lacks required attribute(s): ${missing.join(', ')}`\n      });\n    }\n  }\n  /**\n   * Parse the input string and update the manifest object.\n   *\n   * @param {string} chunk a potentially incomplete portion of the manifest\n   */\n\n\n  push(chunk) {\n    this.lineStream.push(chunk);\n  }\n  /**\n   * Flush any remaining input. This can be handy if the last line of an M3U8\n   * manifest did not contain a trailing newline but the file has been\n   * completely received.\n   */\n\n\n  end() {\n    // flush any buffered input\n    this.lineStream.push('\\n');\n\n    if (this.manifest.dateRanges.length && this.lastProgramDateTime === null) {\n      this.trigger('warn', {\n        message: 'A playlist with EXT-X-DATERANGE tag must contain atleast one EXT-X-PROGRAM-DATE-TIME tag'\n      });\n    }\n\n    this.lastProgramDateTime = null;\n    this.trigger('end');\n  }\n  /**\n   * Add an additional parser for non-standard tags\n   *\n   * @param {Object}   options              a map of options for the added parser\n   * @param {RegExp}   options.expression   a regular expression to match the custom header\n   * @param {string}   options.customType   the custom type to register to the output\n   * @param {Function} [options.dataParser] function to parse the line into an object\n   * @param {boolean}  [options.segment]    should tag data be attached to the segment object\n   */\n\n\n  addParser(options) {\n    this.parseStream.addParser(options);\n  }\n  /**\n   * Add a custom header mapper\n   *\n   * @param {Object}   options\n   * @param {RegExp}   options.expression   a regular expression to match the custom header\n   * @param {Function} options.map          function to translate tag into a different tag\n   */\n\n\n  addTagMapper(options) {\n    this.parseStream.addTagMapper(options);\n  }\n\n}\n\nexport { LineStream, ParseStream, Parser };\n"],
  "mappings": "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",
  "names": ["Stream", "atob", "window", "self"]
}
